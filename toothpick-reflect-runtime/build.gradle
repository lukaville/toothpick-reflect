apply plugin: 'kotlin'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.lazan.java-monkey-patch'

repositories {
    jcenter()
}

monkeyPatch {
    target = 'com.github.stephanenicolas.toothpick:toothpick-runtime:1.1.3'
}

dependencies {
    implementation 'org.jetbrains:annotations:16.0.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:java-hamcrest:2.0.0.0'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

ext.version = '0.1.0'
ext.githubUrl = 'https://github.com/lukaville/toothpick-reflect'

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = 'com.lukaville.toothpick.reflect'
        licenses = ['Apache-2.0']
        vcsUrl = project.ext.githubUrl

        version {
            name = project.ext.version
            released = new Date()
            vcsTag = '0.1.0'
        }
    }
    publications = ['BintrayPublication']
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }
    scm {
        url project.ext.githubUrl
    }
}

publishing {
    publications {
        BintrayPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            groupId 'com.lukaville.toothpick.reflect'
            artifactId 'toothpick-reflect-runtime'
            version project.ext.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fully reflective implementation of toothpick 1.x')
                root.appendNode('name', 'Toothpick Reflect')
                root.appendNode('url', project.ext.githubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
